"use client";
import React from 'react';
import styled from '@emotion/styled';
import { Transaction, TransactionStatus } from '../model/types';
import { walletUtils } from '@/entities/wallet';

interface TransactionListProps {
  transactions: Transaction[];
  isLoading?: boolean;
  error?: string | null;
  className?: string;
  withAIInsights?: boolean;
}

const Container = styled.div`
  display: flex;
  flex-direction: column;
  gap: 12px;
  max-width: 100%;
`;

const TransactionCard = styled.div`
  background: linear-gradient(145deg, #1e1e2e, #2d2d44);
  border-radius: 12px;
  padding: 16px;
  color: white;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  display: grid;
  grid-template-columns: auto 1fr auto;
  gap: 16px;
  align-items: center;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 12px;
  }
`;

const TransactionIcon = styled.div<{ status: TransactionStatus }>`
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  
  ${({ status }) => {
    switch (status) {
      case TransactionStatus.COMPLETED:
        return 'background-color: rgba(76, 175, 80, 0.2); color: #4CAF50;';
      case TransactionStatus.PENDING:
        return 'background-color: rgba(255, 193, 7, 0.2); color: #FFC107;';
      case TransactionStatus.FAILED:
        return 'background-color: rgba(244, 67, 54, 0.2); color: #F44336;';
      default:
        return 'background-color: rgba(158, 158, 158, 0.2); color: #9E9E9E;';
    }
  }}
`;

const TransactionInfo = styled.div`
  display: flex;
  flex-direction: column;
  gap: 4px;
`;

const TransactionHash = styled.a`
  color: #88d3ce;
  font-family: monospace;
  font-size: 14px;
  text-decoration: none;
  
  &:hover {
    text-decoration: underline;
  }
`;

const TransactionAddresses = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #a0a0c0;
`;

const Address = styled.span`
  font-family: monospace;
`;

const Arrow = styled.span`
  color: #6e45e1;
`;

const TransactionDetails = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  
  @media (max-width: 768px) {
    align-items: flex-start;
  }
`;

const Amount = styled.div`
  font-size: 18px;
  font-weight: 600;
`;

const Timestamp = styled.div`
  font-size: 12px;
  color: #a0a0c0;
`;

const StatusBadge = styled.div<{ status: TransactionStatus }>`
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  margin-top: 4px;
  
  ${({ status }) => {
    switch (status) {
      case TransactionStatus.COMPLETED:
        return 'background-color: rgba(76, 175, 80, 0.2); color: #4CAF50;';
      case TransactionStatus.PENDING:
        return 'background-color: rgba(255, 193, 7, 0.2); color: #FFC107;';
      case TransactionStatus.FAILED:
        return 'background-color: rgba(244, 67, 54, 0.2); color: #F44336;';
      default:
        return 'background-color: rgba(158, 158, 158, 0.2); color: #9E9E9E;';
    }
  }}
`;

const Note = styled.div`
  font-size: 14px;
  color: #a0a0c0;
  margin-top: 8px;
  padding-top: 8px;
  border-top: 1px solid rgba(255, 255, 255, 0.05);
`;

const AIInsight = styled.div`
  background-color: rgba(110, 69, 225, 0.1);
  border-left: 3px solid #6e45e1;
  padding: 10px;
  border-radius: 4px;
  margin-top: 8px;
  font-size: 14px;
  color: #d1d1e0;
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100px;
`;

const LoadingSpinner = styled.div`
  width: 30px;
  height: 30px;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: #6e45e1;
  animation: spin 1s linear infinite;
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
`;

const ErrorMessage = styled.div`
  color: #F44336;
  text-align: center;
  padding: 20px;
  background: rgba(244, 67, 54, 0.1);
  border-radius: 8px;
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 40px 20px;
  color: #a0a0c0;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 12px;
`;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò-–∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
const generateAIInsight = (transaction: Transaction): string => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ò–ò-–∞–Ω–∞–ª–∏–∑,
  // –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
  const insights = [
    '–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã —Å –Ω–∏–∑–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–µ—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.',
    '–ó–∞–º–µ—á–µ–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å —ç—Ç–∏–º –∞–¥—Ä–µ—Å–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.',
    '–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.',
    '–î–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–º–µ–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∞–∑–∞, —á—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ç–∏.',
    '–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –í –±—É–¥—É—â–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∞–∑–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.'
  ];
  
  // –í—ã–±–æ—Ä –∏–Ω—Å–∞–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const hashSum = transaction.hash
    .split('')
    .reduce((sum, char) => sum + char.charCodeAt(0), 0);
  
  return insights[hashSum % insights.length];
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
const formatDate = (timestamp: string): string => {
  try {
    const date = new Date(timestamp);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  } catch (error) {
    return timestamp;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
const getStatusIcon = (status: TransactionStatus): string => {
  switch (status) {
    case TransactionStatus.COMPLETED:
      return '‚úì';
    case TransactionStatus.PENDING:
      return '‚è≥';
    case TransactionStatus.FAILED:
      return '‚úï';
    default:
      return '?';
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
const getStatusText = (status: TransactionStatus): string => {
  switch (status) {
    case TransactionStatus.COMPLETED:
      return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
    case TransactionStatus.PENDING:
      return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
    case TransactionStatus.FAILED:
      return '–û—à–∏–±–∫–∞';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–ª–æ–∫-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä
const getExplorerUrl = (hash: string, chainId?: number): string => {
  const baseUrl = chainId === 1
    ? 'https://etherscan.io'
    : chainId === 11155111
      ? 'https://sepolia.etherscan.io'
      : chainId === 137
        ? 'https://polygonscan.com'
        : 'https://etherscan.io';
  
  return `${baseUrl}/tx/${hash}`;
};

const TransactionList: React.FC<TransactionListProps> = ({
  transactions,
  isLoading,
  error,
  className,
  withAIInsights = false
}) => {
  if (isLoading) {
    return (
      <LoadingContainer className={className}>
        <LoadingSpinner />
      </LoadingContainer>
    );
  }
  
  if (error) {
    return (
      <ErrorMessage className={className}>
        {error}
      </ErrorMessage>
    );
  }
  
  if (!transactions || transactions.length === 0) {
    return (
      <EmptyState className={className}>
        –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
      </EmptyState>
    );
  }
  
  return (
    <Container className={className}>
      {transactions.map((transaction) => (
        <TransactionCard key={transaction.hash}>
          <TransactionIcon status={transaction.status}>
            {getStatusIcon(transaction.status)}
          </TransactionIcon>
          
          <TransactionInfo>
            <TransactionHash
              href={getExplorerUrl(transaction.hash, transaction.chainId)}
              target="_blank"
              rel="noopener noreferrer"
            >
              {transaction.hash.substring(0, 20)}...
            </TransactionHash>
            
            <TransactionAddresses>
              <Address>{walletUtils.formatAddress(transaction.from)}</Address>
              <Arrow>‚Üí</Arrow>
              <Address>{walletUtils.formatAddress(transaction.to)}</Address>
            </TransactionAddresses>
            
            {transaction.note && (
              <Note>{transaction.note}</Note>
            )}
            
            {withAIInsights && (
              <AIInsight>
                <strong>üí° –ò–ò-–∏–Ω—Å–∞–π—Ç:</strong> {generateAIInsight(transaction)}
              </AIInsight>
            )}
          </TransactionInfo>
          
          <TransactionDetails>
            <Amount>{walletUtils.formatBalance(transaction.value)} ETH</Amount>
            <Timestamp>{formatDate(transaction.timestamp)}</Timestamp>
            <StatusBadge status={transaction.status}>
              {getStatusText(transaction.status)}
            </StatusBadge>
          </TransactionDetails>
        </TransactionCard>
      ))}
    </Container>
  );
};

export default TransactionList;
